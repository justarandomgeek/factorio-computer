type ireg {
  @signal-red    callstack, -- 1 call stack and general stack usage
  @signal-green  progbase,  -- 2 base address for rom symbols (const, func)
  @signal-blue   progdata,  -- 3 base address for ram symbols (data)
  @signal-yellow localdata, -- 4 available for local usage

  @signal-grey   intvect,   -- x Interrupt handler address
}

type sreg {
  @signal-blue  pc,
  @signal-green intreturn,
  @signal-cyan  intrequest,
  @signal-I     intenable,
}

type opcode {
  @signal-0     op,

  @signal-1     addr1,
  @signal-2     addr2,
  @signal-3     addr3,

  @signal-A     acc,
  @signal-I     index,

  @signal-R     R1,
  @signal-S     S1,

  @signal-T     R2,
  @signal-U     S2,

  @signal-V     Rd,
  @signal-W     Sd,

  @signal-grey  Imm1,
  @signal-white Imm2,
}

type progsym {
  "",

  -- pointers to match up with rIndex
  -- @signal-red callstack,
  @signal-green constframe,
  @signal-blue dataframe,
  --@signal-yellow unused,

  -- sym table size
  @signal-pink symtsize,

  -- the size and location of the constant section of this program
  @signal-cyan constsize,

  -- the size and location of the data section of this program
  @signal-white datasize,

  -- the address of MAIN()
  @signal-grey mainloc

}

var     @r0   rNull
--
-- r1: global ints
-- r2: local ints - also used for restoring call site
--
-- r3: local vars
-- r4: local vars
-- r5: local vars
-- r6: local vars
--
-- r7: compiler scratch, table arg/return
-- r8: compiler scratch, call/return, int args
--
ireg    @r9   rIndex
var     @r10  rRed
var     @r11  rGreen
sreg    @r12  rStatus
opcode  @r13  rOp
var     @r14  rNixie
var     @r15  rFlanRX
var     @r16  rFlanTX
var     @r17  rKeyboard

var @500 nixies[5]



function CLRDISP()
  -- Clear Display
  rNixie.signal-grey = 1
  rNixie.signal-grey = 1
  rNixie.signal-grey = 1
  rNixie.signal-grey = 1
  rNixie.signal-grey = 1
end

function READLINE()
  rKeyboard = rNull
  while rKeyboard.signal-grey == 0 do  end
  return rKeyboard
end

function COLORDEMO()
  -- Print a color demo
  rNixie = { signal-red=1, signal-green=2, signal-blue=4, signal-cyan=8, signal-pink=16, signal-yellow=32 } + "COLORS"
  rNixie.signal-grey = 1
  rNixie = {signal-red=7, signal-green=496, signal-blue=61440} + "RED GREEN   BLUE"
  rNixie.signal-grey = 1
  rNixie = {signal-cyan=15, signal-pink=480, signal-yellow=258048} + "CYAN PINK   YELLOW"
end

function MATHDEMO(int i)
  --nn FACTORIAL
  --nn SQUARE
  --ii NUMBER
  var num --TODO: var num,square,factorial
  var square
  var factorial
  num = "NUMBER" --TODO: initializers with definition?
  num.signal-white = 1
  square = "SQUARE"
  factorial = "FACTORIAL"
  factorial.signal-white = 1
  while num.signal-white <= i do
    nixies[0]=num

    square.signal-white = num.signal-white * num.signal-white
    nixies[1]=square

    factorial.signal-white = factorial.signal-white * num.signal-white
    nixies[2]=factorial

    num.signal-white += 1
  end
  return
end

function KEYDEMO()
  while rNull.signal-0 == rNull.signal-0 do
    READLINE()
    rNixie.signal-grey=1
  end
end

function MAIN()
  CLRDISP()

  -- Print helloworld
  rNixie = "HELLO WORLD"
  rNixie.signal-grey = 1
  COLORDEMO()

  CLRDISP()
  MATHDEMO(10)

  rNixie.signal-grey = 1

  KEYDEMO()
end
