type ireg {
  @signal-red    callstack,
  @signal-green  sysdata,
  @signal-blue   appdata1,
  @signal-yellow appdata2,
  @signal-grey   intvect,
}

type sreg {
  @signal-blue  pc,
  @signal-green intreturn,
  @signal-cyan  intrequest,
  @signal-I     intenable,
}

type opcode {
  @signal-0     op,
  @signal-A     acc,
  @signal-I     index,
  @signal-R     R1,
  @signal-S     S1,
  @signal-T     R2,
  @signal-U     S2,
  @signal-V     Rd,
  @signal-W     Sd,
  @signal-grey  imm1,
  @signal-white imm2,
}

var     @r0   rNull
ireg    @r9   rIndex
var     @r10  rRed
var     @r11  rGreen
sreg    @r12  rStatus
opcode  @r13  rOp
var     @r14  rNixie
var     @r15  rFlanRX
var     @r16  rFlanTX
var     @r17  rKeyboard

var @500 nixies[5]



function CLRDISP()
  -- Clear Display
  rNixie.signal-grey = 1
  rNixie.signal-grey = 1
  rNixie.signal-grey = 1
  rNixie.signal-grey = 1
  rNixie.signal-grey = 1
end

function READLINE()
  var line
  while rKeyboard.signal-grey == 0 do
    rNull=rNull --TODO: allow empty loop?
  end
  line = rKeyboard
  rKeyboard = rNull
  return line
end

function COLORDEMO()
  -- Print a color demo
  rNixie = { signal-red=1, signal-green=2, signal-blue=4, signal-cyan=8, signal-pink=16, signal-yellow=32 }&"COLORS"
  rNixie.signal-grey = 1
  rNixie = {signal-red=7, signal-green=496, signal-blue=61440}&"RED GREEN   BLUE"
  rNixie.signal-grey = 1
  rNixie = {signal-cyan=15, signal-pink=480, signal-yellow=258048}&"CYAN PINK   YELLOW"
end

function MATHDEMO(int i)
  --nn FACTORIAL
  --nn SQUARE
  --ii NUMBER
  var num --TODO: var num,square,factorial
  var square
  var factorial
  num = "NUMBER" --TODO: initializers with definition?
  num.signal-white = 1
  square = "SQUARE"
  factorial = "FACTORIAL"
  factorial.signal-white = 1
  while num.signal-white < i+1 do
    nixies[0]=num

    square.signal-white = num.signal-white * num.signal-white
    nixies[1]=square

    factorial.signal-white = factorial.signal-white * num.signal-white
    nixies[2]=factorial

    num.signal-white += 1
  end
  return
end

function KEYDEMO()
  while rNull.nil == rNull.nil do
    READLINE()
    rNixie.signal-grey=1
  end
end

function MAIN()
  rIndex.callstack = 50

  CLRDISP()

  -- Print helloworld
  rNixie = "HELLO WORLD"
  rNixie.signal-grey = 1
  COLORDEMO()

  CLRDISP()
  MATHDEMO(10)

  rNixie.signal-grey = 1

  KEYDEMO()
end
