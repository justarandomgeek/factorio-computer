-- Standard types:
type ireg {
  @signal-red    callstack, -- 1 call stack and general stack usage
  @signal-green  progbase,  -- 2 base address for rom symbols (const, func)
  @signal-blue   progdata,  -- 3 base address for ram symbols (data)
  @signal-yellow localdata, -- 4 available for local usage

  @signal-grey   intvect,   -- x Interrupt handler address
}

type sreg {
  @signal-blue  pc,
  @signal-green intreturn,
  @signal-cyan  intrequest,
  @signal-I     intenable,
}

type opcode {
  @signal-0     op,

  @signal-1     addr1,
  @signal-2     addr2,
  @signal-3     addr3,

  @signal-A     acc,
  @signal-I     index,

  @signal-R     R1,
  @signal-S     S1,

  @signal-T     R2,
  @signal-U     S2,

  @signal-V     Rd,
  @signal-W     Sd,

  @signal-grey  Imm1,
  @signal-white Imm2,
}

type progsym {
  "",

  -- pointers to match up with rIndex
  @signal-red     csreserved,
  @signal-green   constframe,    -- not specified in program header, but possibly in copy of it in system's program list
  @signal-blue    dataframe,     -- not specified in program header, but possibly in copy of it in system's program list
  @signal-yellow  localreserved,

  -- sym table size
  symtsize,

  -- the size of this program rom - this includes symtable, constant table, and code
  romsize,

  -- the size of the data section of this program
  datasize,

  -- the address of MAIN()
  mainloc
}

type symbol {
  "",

  symtype,   -- DATA=1 FUNC=2 CONST=3
  addr,
  size,

}

-- Standard Definitions:
var     @r0   rNull
-- r1: global ints
-- r2: local ints - also used for restoring call site
-- r3: local vars
-- r4: local vars
-- r5: local vars
-- r6: local vars
-- r7: compiler scratch, table arg/return
-- r8: compiler scratch, call/return, int args
ireg    @r9   rIndex
var     @r10  rRed
var     @r11  rGreen
sreg    @r12  rStatus
opcode  @r13  rOp
var     @r14  rNixie
var     @r15  rFlanRX
var     @r16  rFlanTX
var     @r17  rKeyboard

var[6] @500 nixies


--dynamically manage this? or just reserve excessively large number?
progsym[6] programs

function LDPROG(int address)
  -- get the program symbol for the new program
  progsym ldsym
  ldsym = @address

  -- allocate local data


  -- add the progam to the global list

end


function LSTPROGS()
  int i
  while i < 6 do --TODO for loop?
    nixies[i] = programs[i] --TODO * stringmask ?

    i += 1
  end

end


function MAIN()
  rNixie = "LOADER 0.1"

end
